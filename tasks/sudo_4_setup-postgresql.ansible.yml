# Pre:
# $ ansible-galaxy collection install community.postgresql
# Ref:
# - community.postgresql.postgresql_db module – Add or remove PostgreSQL databases from a remote host — Ansible Documentation
#   https://docs.ansible.com/ansible/latest/collections/community/postgresql/postgresql_db_module.html

---
- hosts: all
  become: true

  pre_tasks:
    - name: 'Install packages by apt'
      when: ansible_facts['os_family'] == 'Debian'
      ansible.builtin.apt:
        state: present
        name: "{{ packages }}"
      vars:
        packages:
          - postgresql

    - name: 'Install Python packages'
      ansible.builtin.pip: name={{ item }} state=present
      with_items:
        - psycopg2-binary

  tasks:
    - name: 'Start and enable services'
      ansible.builtin.service: name={{ item }} state=started enabled=yes
      with_items:
        - postgresql

    - name: 'Create app database'
      community.postgresql.postgresql_db:
        state: present
        name: "{{ custom_db_name }}"
        encoding: 'UTF-8'
      become_user: postgres

    - name: 'Create db user'
      community.postgresql.postgresql_user:
        state: present
        name: "{{ custom_db_user }}"
        password: "{{ custom_db_password }}"
      become_user: postgres

    - name: 'Grant db user access to app db'
      community.postgresql.postgresql_privs:
        type: database
        database: "{{ custom_db_name }}"
        roles: "{{ custom_db_user }}"
        grant_option: false
        privs: all
      become_user: postgres

  handlers:
    # - name: 'Restart postgres'
    #   become: true
    #   ansible.builtin.service:
    #     name: postgresql.service
    #     state: restarted
